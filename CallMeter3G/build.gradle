buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath('com.github.triplet.gradle:play-publisher:1.0.1') {
            exclude group: 'com.google.guava'
        }
    }
}

apply plugin: 'com.android.application'

repositories {
    maven {
        url 'https://raw.githubusercontent.com/felixb/mvn-repo/master'
    }
    maven {
        url 'https://raw.githubusercontent.com/Goddchen/mvn-repo/master/'
    }
    mavenCentral()
}

ext {
    gitVersion = null
}

def getVersionName = { ->
    if (project.gitVersion == null) {
        def version = "0.0.0"
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            version = stdout.toString().trim().replaceFirst('^[a-zA-Z][^-]*-', '')
        } catch (ignored) {
            return null
        }
        logger.info("version: ${version}")
        project.gitVersion = version
    } else {
        logger.debug("version already set: ${project.gitVersion}")
    }
    return project.gitVersion
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionName getVersionName()
        buildConfigField 'boolean', 'DEBUG_LOG', 'true'
    }

    lintOptions {
        // checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    signingConfigs {
        if (project.hasProperty('releaseKeystorePassword')) {
            release {
                storeFile file("release.ks")
                storePassword releaseKeystorePassword
                keyAlias "jarsign"
                keyPassword releaseKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }

        nologDebug {
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            minifyEnabled true
            buildConfigField 'boolean', 'DEBUG_LOG', 'false'
        }

        logRelease {
            versionNameSuffix "-logRelease"
            minifyEnabled false
        }

        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            minifyEnabled true
            buildConfigField 'boolean', 'DEBUG_LOG', 'false'
        }
    }

    applicationVariants.all { variant ->
        if (!variant.name.contains('debug')) {
            variant.outputs.each { output ->
                def file = output.outputFile
                output.outputFile = new File(file.parent,
                        file.name.replace('.apk', '-' + defaultConfig.versionName + '.apk'))
            }
        }
    }
}

dependencies {
    compile files('libs/mpandroidchartlibrary-2-1-6.jar')
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.android.gms:play-services-ads:8.4.0'
    compile 'com.actionbarsherlock:viewpagerindicator:2.4.1'
    compile 'de.ub0r.android.lib:lib:1.1.0'
    compile 'de.ub0r.android.logg0r:logg0r:2.0.0'
    compile 'de.ub0r.android.eucookieconsent:library:0.2.0@aar'
    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.android.support:recyclerview-v7:23.1.1'
}

task updateChangelog << {
    def proc = 'shell/update-changelog.sh'.execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println 'ERROR: ' + line }
    proc.waitFor()
}

task removeUnfinishedTranslations << {
    def proc = 'shell/remove-unfinished-translations.sh'.execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println 'ERROR: ' + line }
    proc.waitFor()
}

task readdUnfinishedTranslations << {
    def proc = "git checkout CallMeter3G/src/main/res/values-*/*xml".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println 'ERROR: ' + line }
    proc.waitFor()
}



tasks.whenTaskAdded { task ->
    if (task.name == 'mergeReleaseResources') {
        task.dependsOn updateChangelog
        task.dependsOn removeUnfinishedTranslations
    }
}